// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("tccifsc_PRISMA_URL") // uses connection pooling
  directUrl = env("tccifsc_URL_NON_POOLING") // uses a direct connection
}

model Usuario {
  id              String  @id @default(uuid())
  nome            String
  email           String  @unique
  senha           String  @db.Text
  papel           String?
  cidade          String?
  curso           String?
  sit             String?
  sobre           String?
  userPerfilImage String?
  userCapaImage   String?

  criadoEm     DateTime  @default(now()) @map("criado_em")
  atualizadoEm DateTime? @updatedAt @map("atualizado_em")
  ultimoAcesso DateTime? @map("ultimo_acesso")

  Empresa Empresa[] @relation("UserId")
  Favoritos Favoritos[] @relation("FavoritoId")

  @@index([id])
  @@index([email])
}

model Empresa {
  nome      String
  cnpj      String @id
  descricao String

  usuario   Usuario @relation("UserId", fields: [usuarioId], references: [id])
  usuarioId String

  Vaga Vaga[] @relation("EmpId")
}

model Vaga {
  id          Int    @id @default(autoincrement())
  titulo      String
  local       String
  modalidade  String
  senioridade String
  contatacao  String
  descricao   String

  Empresa   Empresa @relation("EmpId", fields: [empresaId], references: [cnpj])
  empresaId String
}

model curso {
  id Int @id @unique

  Favorito Favoritos[] @relation("FavoritoCursoId")
}

model Favoritos {
  id Int @id @default(autoincrement())

  Curso curso @relation("FavoritoCursoId", fields: [cursoId], references: [id])
  cursoId Int

  Usuario Usuario @relation("FavoritoId", fields: [usuarioId], references: [id])
  usuarioId String
  
  @@unique([usuarioId, cursoId])
}